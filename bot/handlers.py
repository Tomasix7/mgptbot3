import logging
from config import client_groq, bot, request_queue
from bot.truncation_utils import truncate_messages  # –û–±—Ä–µ–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
from dialogue_storage import dialogue_storage
from characters import get_character
from bot.utils import is_authorized, notify_admin, DuplicateMessageFilter
import hashlib
import asyncio
import time
import os
from config import TTS_ENABLED_USERS
from tts import text_to_speech, remove_emoji
# from pymongo import MongoClient

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–µ–π
last_request_hash = None
# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∏–ª—å—Ç—Ä–∞
duplicate_filter = DuplicateMessageFilter()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /anima
@bot.message_handler(commands=['anima'])
def start_message(message):
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    if duplicate_filter.is_duplicate(message.text):
        return  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = bot.send_message(message.chat.id, "–ü–∏—à—É...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –∞–Ω–∏–º–∞—Ü–∏–∏
    for i in range(1, 4):
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ—á–µ–∫
        bot.edit_message_text(chat_id=message.chat.id, message_id=msg.message_id, text="–ü–∏—à—É ‚úçÔ∏è " + "‚ù§Ô∏è"*i)
        time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.edit_message_text(chat_id=message.chat.id, message_id=msg.message_id, text="–ì–æ—Ç–æ–≤–æ! üíñ")

# TEST: Heart : animation ? 
@bot.message_handler(commands=['heart'])
def start_message(message):
    bot.send_message(message.chat.id, "‚ù§Ô∏è")


# TEST: POSITIVE RESPONSE
@bot.message_handler(commands=['start'])
def start_message(message):

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    if duplicate_filter.is_duplicate(message.text):
        return  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

    bot.send_message(message.chat.id, """
    –ü—Ä–∏–≤–µ—Ç! üòä 
–Ø –º–æ–≥—É –±—ã—Ç—å —Ç–≤–æ–∏–º –±–æ—Ç—Ñ—Ä–µ–Ω–¥–æ–º üòé, –≥–æ–≤–æ—Ä–∏—Ç—å –æ —á–µ–º —É–≥–æ–¥–Ω–æ üòâ –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üíå 
    """)

@bot.message_handler(commands=['restart'])
def restart_model(message):
    if not is_authorized(message.chat.id):
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç üòä –ü–æ–∫–∞ —É –Ω–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É üòå")
        return

    # chat_id = str(message.chat.id) 1
    chat_id = message.chat.id
    try:
        result = dialogue_storage.collection.delete_many({'chat_id': chat_id})
        
        if result.deleted_count > 0:
            logging.info(f'–£–¥–∞–ª–µ–Ω–æ {result.deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}')
            bot.send_message(message.from_user.id, f'–û–∫, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞! üòäüìù –û—á–∏—â–µ–Ω–æ {result.deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ ‚Ññ {chat_id}.')
        else:
            logging.info(f'–ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}')
            bot.send_message(message.from_user.id, f'–ö–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ –ø—É—Å—Ç–∞. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å –¥–ª—è —á–∞—Ç–∞ ‚Ññ {chat_id}. üòÑ –î–∞–≤–∞–π –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /restart: {e}')
        bot.send_message(message.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... ü´§')

@bot.message_handler(commands=['len'])
def get_dialogue_length(message):
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    if duplicate_filter.is_duplicate(message.text):
        return  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    
    if not is_authorized(message.chat.id):
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç üòä –ü–æ–∫–∞ —É –Ω–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É üòå")
        return

    # chat_id = str(message.chat.id) 2
    chat_id = message.chat.id
    
    all_messages = dialogue_storage.get_messages(chat_id)
    total_chars = sum(len(msg['content']) for msg in all_messages)
    message_count = len(all_messages)
    
    response = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞:\n\n"
    response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n\n"
    response += f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {total_chars}\n\n"
    response += f"–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {all_messages[0]['timestamp'] if all_messages else '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}\n\n"
    response += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {all_messages[-1]['timestamp'] if all_messages else '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}"
    
    bot.send_message(message.from_user.id, response)

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     DBASE HANDLER     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–≤–µ–¥–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª db_handler.py

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     TOOLS FOR TOOL USE MODEL     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

# Define a tool for browsing the internet

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>     TEXT HANDLER     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    ADMIN_CHAT_ID = os.getenv('CHATID')
    notify_admin(bot, message, ADMIN_CHAT_ID)

    if not is_authorized(message.chat.id):
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç üòä –ü–æ–∫–∞ —É –Ω–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É üòå")
        return

    global last_request_hash
    heart_message = bot.send_message(message.chat.id, "üíö")
    current_hash = hashlib.md5(message.text.encode()).hexdigest()

    if current_hash == last_request_hash:
        bot.edit_message_text(chat_id=message.chat.id, message_id=heart_message.message_id, text="‚ù§Ô∏è")
        return
    
    last_request_hash = current_hash

    logging.debug(f'User chat_id: {message.chat.id}')
    logging.info(f'Received message: {message.text}')
    
    chat_id = message.chat.id
    dialogue_storage.add_message(chat_id, 'user', message.text)
    dialogue_history = dialogue_storage.get_messages(chat_id)
    max_messages = 10
    if len(dialogue_history) > max_messages:
        dialogue_history = dialogue_history[-max_messages:]

    messages_for_groq = truncate_messages([
        {"role": msg["role"], "content": msg["content"]} for msg in dialogue_history
    ])

    # character_info, character_name, users_gender, timezone = get_character(message.chat.id)
    character_info, character_name, users_gender, timezone, object_id = get_character(message.chat.id)
    system_message = {"role": "system", "content": character_info}
    messages = [system_message] + messages_for_groq

    async def send_request():
        try:
            response = client_groq.chat.completions.create(
                model='llama-3.3-70b-versatile', 
                messages=messages, temperature=0
            )
            model_response = response.choices[0].message.content
            bot.edit_message_text(chat_id=message.chat.id, message_id=heart_message.message_id, text=model_response)
            dialogue_storage.add_message(chat_id, 'assistant', model_response)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
            voice_name = TTS_ENABLED_USERS.get(str(object_id), "en-US-AvaMultilingualNeural")
            text_to_speech(bot, model_response, chat_id, voice_name=voice_name)
        except Exception as e:
            logging.error(f'Error when sending request to Groq: {e}')
            bot.edit_message_text(chat_id=message.chat.id, message_id=heart_message.message_id, text="–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–º–∞–π–ª–∏–∫ üôè ü•∞")

    asyncio.run(request_queue.add_request(send_request))