import os
import sys
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç —Å–≤–µ—Ä—Ö—É –ø—Ä–æ—Ö–æ–¥–∏–ª
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import logging
from pymongo import MongoClient
from bson.objectid import ObjectId
from datetime import datetime
import random
import pytz
from pytz import all_timezones_set
import re
from time_zone_manager import TimeZoneManager  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–æ–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
from config import client_groq, bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from dialogue_storage import dialogue_storage  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
from unsplash_functions import get_random_image
# from devart import send_deviantart_image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient(os.getenv("MONGO_URI"))
DBASE = os.getenv('DBASE')

db = client[DBASE]  # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å–≤–æ—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
users_collection = db["users_collection"]
characters_collection = db["characters"]  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

def convert_numeric_timezone(numeric_timezone):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ pytz timezone."""
    try:
        offset_hours = int(numeric_timezone)

        # –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º–µ—â–µ–Ω–∏—è
        matching_timezones = [tz for tz in all_timezones_set if 'GMT' not in tz and offset_hours == datetime.now(pytz.timezone(tz)).utcoffset().total_seconds() // 3600]
        
        if matching_timezones:
            return pytz.timezone(matching_timezones[0])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
        else:
            return pytz.UTC  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é UTC

    except ValueError:
        logging.error(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {numeric_timezone}")
        return pytz.UTC

def get_user_and_character_data(object_id):
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ObjectID."""
    try:
        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ObjectID
        user_data = users_collection.find_one({"_id": ObjectId(object_id)})
        if not user_data:
            raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ObjectID {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ characters
        character_name = user_data.get("character", "Default Character")
        character_data = characters_collection.find_one({"character": character_name})
        if not character_data:
            raise ValueError(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å –∏–º–µ–Ω–µ–º {character_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ characters.")

        character_description = character_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        users_gender = user_data.get("users_gender", "unknown")
        timezone_offset = user_data.get("timezone", 0)

        return character_description, users_gender, timezone_offset, user_data.get("chat_id")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
        return None, None, None, None
    

def get_random_elements(elements, n):
    return random.sample(elements, min(n, len(elements)))

def split_message(message, max_length):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length."""
    return [message[i:i + max_length] for i in range(0, len(message), max_length)]

def truncate_repeating_text(text, max_repeats=3):
    """–û–±—Ä–µ–∑–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ –∏ —Å–∏–º–≤–æ–ª—ã."""
    
    # –£–±–∏—Ä–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å—Ä—Å—Ä—Å—Ä—Å—Ä—Å...')
    def limit_repeated_chars(match):
        char_sequence = match.group(0)
        return char_sequence[:max_repeats]
    
    # –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
    text = re.sub(r'(.)\1{3,}', limit_repeated_chars, text)

    words = text.split()
    result = []
    prev_word = None
    repeat_count = 0
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–ª–æ–≤
    for word in words:
        if word == prev_word:
            repeat_count += 1
        else:
            repeat_count = 0
        
        if repeat_count < max_repeats:
            result.append(word)
        
        prev_word = word
    
    return ' '.join(result)

def process_response(response, chat_id, bot, users_gender):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Groq, –æ–±—Ä–µ–∑–∞—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã."""
    if response.choices and response.choices[0].message and response.choices[0].message.content:
        response_content = response.choices[0].message.content
        logging.info(f'–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response_content}')
        logging.info(f'–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Groq: {len(response_content)}')

        # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Å–ª–æ–≤–∞
        cleaned_response = truncate_repeating_text(response_content)
        logging.info(f'–û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {cleaned_response}')

        image_url = get_random_image(users_gender)
        if image_url:
            bot.send_photo(chat_id, image_url)
        else:
            logging.error("url –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–∫ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è...")

        send_long_message(chat_id, bot, cleaned_response)
        dialogue_storage.add_message(chat_id, 'assistant', cleaned_response)
    else:
        logging.error("–û—Ç–≤–µ—Ç –æ—Ç Groq –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–ª—É—á–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        bot.send_message(chat_id, "–û–ø—è—Ç—å —è —ç—Ç–æ —Å–∞–º–æ–µ... ü§™")

def send_long_message(chat_id, bot, message):
    max_message_length = 4096
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
    for i in range(0, len(message), max_message_length):
        bot.send_message(chat_id, message[i:i+max_message_length])


def send_scheduled_message(object_id):
    logging.info(f"=== –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è send_scheduled_message –¥–ª—è object_id: {object_id} ===")
    try:
        logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ ID –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–∏—Ö–∏–µ —á–∞—Å—ã.
        if object_id == "670543779eed55e5c40145ea": # –∞–ª
            # –°–æ–∑–¥–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC+5
            utc_plus_5 = pytz.FixedOffset(5 * 60)  # 5 hours * 60 minutes
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC+5
            current_time = datetime.now(utc_plus_5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω UTC+5
            if current_time.hour < 7 or 13 <= current_time.hour < 18:
            # if current_time.hour < 7 or 10 < current_time.hour < 12:
                logging.info(f"–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ObjectID {object_id}, –≤—Ä–µ–º—è {current_time.strftime('%H:%M')} UTC+5")
                return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        
        if object_id == "66fe7107ba9a8734f34b71cd": # –º–Ω
            logging.info("Start handle schedule instructions")

            # # –≠—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render
            # # –°–æ–∑–¥–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC+3
            # utc_plus_3 = pytz.FixedOffset(3 * 60)  # 3 hours * 60 minutes
            # # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC+3
            # current_time = datetime.now(utc_plus_3)

            # –°–æ–∑–¥–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC+3
            timezone = pytz.timezone('Europe/Moscow')  # UTC+3
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC+3
            utc_now = datetime.now(pytz.UTC)
            current_time = utc_now.astimezone(timezone)
        
            logging.info(f'UTC –≤—Ä–µ–º—è: {utc_now}, –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (UTC+3): {current_time}')
            logging.info(f'current_time.hour = {current_time.hour}')
            
            # –î–æ–±–∞–≤–∏–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
            logging.info(f"""–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π:
            current_time.hour < 7: {current_time.hour < 7}
            8 <= current_time.hour < 11: {8 <= current_time.hour < 11}
            12 <= current_time.hour < 18: {12 <= current_time.hour < 18}
            current_time.hour == 19: {current_time.hour == 19}
            current_time.hour >= 23: {current_time.hour >= 23}
            """)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è –≤ –∑–∞–¥–∞–Ω–Ω—ã–π  –¥–∏–∞–ø–∞–∑–æ–Ω UTC+3
            # if current_time.hour < 7 or 13 <= current_time.hour < 18:

            if (current_time.hour < 7 or 
                (8 <= current_time.hour < 11) or 
                (12 <= current_time.hour < 18) or 
                current_time.hour == 19 or 
                current_time.hour >= 23):

                logging.info(f"–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ObjectID {object_id}, –≤—Ä–µ–º—è {current_time.strftime('%H:%M')} UTC+3")
                return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            else:
                logging.info('Schedule instructions were ignored')
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –±–∞–∑—ã –ø–æ ObjectID
        character_info, users_gender, timezone_offset, chat_id = get_user_and_character_data(object_id)

        if character_info is None:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ pytz –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É (—á–µ—Ä–µ–∑ .zone)
        user_timezone = convert_numeric_timezone(timezone_offset).zone
        logging.info(f'–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_timezone}')

        # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ TimeZoneManager
        tz_manager = TimeZoneManager(user_timezone)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å
        current_hour = tz_manager.get_current_hour()
        logging.info(f'–¢–µ–∫—É—â–∏–π —á–∞—Å: {current_hour}')

        base_prompt_file = tz_manager.get_prompt_for_time(current_hour)
        logging.info(f'–ü—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞: {base_prompt_file}')

        time_based_elements = tz_manager.get_elements_for_time(current_hour)
        logging.info(f'–≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {time_based_elements}')

        # –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—Ä–æ–º—Ç
        now = datetime.now(tz_manager.default_timezone)
        today = now.strftime("%d.%m.%Y")
        current_time = now.strftime("%H:%M")

        # # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        today_elements = random.sample(time_based_elements, 2)
        # today = datetime.now(tz_manager.default_timezone).strftime("%d.%m.%Y")
        # final_prompt = f"{base_prompt_file}\n–°–µ–≥–æ–¥–Ω—è {today}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏ –≤ –ø–æ–∂–µ–ª–∞–Ω–∏–µ —Ç–µ–º—ã: {', '.join(today_elements)}."

        final_prompt = f"{base_prompt_file}\n–°–µ–≥–æ–¥–Ω—è {today}, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {current_time}. " \
               f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏ –≤ –ø–æ–∂–µ–ª–∞–Ω–∏–µ —Ç–µ–º—ã: {', '.join(today_elements)}. " \
               f"–£—á–∏—Ç—ã–≤–∞–π —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫."

        logging.info(f'–î–ª–∏–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {len(final_prompt)}')

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏–∑ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        dialogue_history = dialogue_storage.get_messages(chat_id)[0:0]
        logging.info(f'–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è chat_id {chat_id}: {dialogue_history}')

        if len(dialogue_history) == 0:
            bot.send_message(chat_id, "üéâü•∞")

        messages_for_groq = [
            {"role": msg["role"], "content": msg["content"]} for msg in dialogue_history
        ]

        system_message = {
            "role": "system",
            "content": character_info
        }

        messages = [system_message] + messages_for_groq
        messages.append({"role": 'user', "content": final_prompt})

        combined_messages = [msg["content"] for msg in messages]
        full_message = "\n".join(combined_messages)

        logging.info(f'–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq: {len(full_message)}')
        logging.info(f'–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq: {full_message}')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Groq
        response = client_groq.chat.completions.create(
            model='llama-3.1-70b-versatile',
            messages=[{"role": 'user', "content": full_message}],
            temperature=0
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        process_response(response, chat_id, bot, users_gender)
    except AttributeError as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_scheduled_message: {e}')
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º... üòä")
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_scheduled_message: {e}')
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòä")

if __name__ == '__main__':
    # –í—ã–∑–æ–≤ DeviantArt —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ send_scheduled_message
    # send_deviantart_image()

    if len(sys.argv) != 2:
        logging.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –û–∂–∏–¥–∞–ª—Å—è –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - ObjectID.")
    else:
        object_id = sys.argv[1]
        send_scheduled_message(object_id)
