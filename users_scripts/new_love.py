import os
import sys
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç —Å–≤–µ—Ä—Ö—É –ø—Ä–æ—Ö–æ–¥–∏–ª
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import logging
from pymongo import MongoClient
from bson.objectid import ObjectId
from datetime import datetime
import random
import pytz
from pytz import all_timezones_set
import re
from time_zone_manager import TimeZoneManager  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–æ–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
from config import client_groq, bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from dialogue_storage import dialogue_storage  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
from unsplash_functions import get_random_image
import time
import azure.cognitiveservices.speech as speechsdk
from emoji import replace_emoji
from config import TTS_ENABLED_USERS

# from devart import send_deviantart_image # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ—Ç–æ–º—É —á—Ç–æ devart –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient(os.getenv("MONGO_URI"))
DBASE = os.getenv('DBASE')

db = client[DBASE]  # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å–≤–æ—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
users_collection = db["users_collection"]
characters_collection = db["characters"]  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

# New Cod
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Azure Speech Service
SPEECH_KEY = os.getenv("SPEECH_KEY")
SPEECH_REGION = os.getenv("SPEECH_REGION", "eastus")

def remove_emoji(text):
    """–£–¥–∞–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    return replace_emoji(text, '')

def cleanup_audio_file(file_path, max_attempts=5, delay=2):  # —É–≤–µ–ª–∏—á–∏–ª–∏ delay –¥–æ 2 —Å–µ–∫—É–Ω–¥
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    """
    for attempt in range(max_attempts):
        try:
            if os.path.exists(file_path):
                os.close(os.open(file_path, os.O_RDONLY))  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ö—ç–Ω–¥–ª—ã —Ñ–∞–π–ª–∞
                os.remove(file_path)
                logging.info(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                return True
        except Exception as e:
            if attempt < max_attempts - 1:
                logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                time.sleep(delay)
            else:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {e}")
    return False

def text_to_speech(text, chat_id, voice_name="en-US-AvaMultilingualNeural"):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    Args:
        text: —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        voice_name: –∏–º—è –≥–æ–ª–æ—Å–∞ Azure (default: "en-US-AvaMultilingualNeural")
    """
    output_file = None
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"speech_{timestamp}.mp3"

        speech_config = speechsdk.SpeechConfig(
            subscription=SPEECH_KEY, 
            region=SPEECH_REGION
        )
        
        speech_config.set_speech_synthesis_output_format(
            speechsdk.SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3
        )
        
        # Use the provided voice name
        speech_config.speech_synthesis_voice_name = voice_name
        
        audio_config = speechsdk.audio.AudioOutputConfig(filename=output_file)
        
        speech_synthesizer = speechsdk.SpeechSynthesizer(
            speech_config=speech_config, 
            audio_config=audio_config
        )
        
        clean_text = remove_emoji(text)
        
        result = speech_synthesizer.speak_text_async(clean_text).get()
        
        if result.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
            time.sleep(1)
            
            try:
                with open(output_file, 'rb') as audio_file:
                    bot.send_voice(chat_id, audio_file, timeout=30)
                logging.info(f"–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
                raise
        else:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {result.reason}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ text_to_speech: {e}")
        raise
    finally:
        if output_file:
            time.sleep(2)
            cleanup_audio_file(output_file)

def process_response_with_tts(response, chat_id, bot, users_gender, use_tts=False, object_id=None):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞—É–¥–∏–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    try:
        if response.choices and response.choices[0].message and response.choices[0].message.content:
            response_content = response.choices[0].message.content
            logging.info(f'–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response_content}')
            
            cleaned_response = truncate_repeating_text(response_content)
            logging.info(f'–û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {cleaned_response}')

            # –ó–∞–∫—Ä—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å Unsplash
            # image_url = get_random_image(users_gender)
            # if image_url:
            #     bot.send_photo(chat_id, image_url)
            # else:
            #     logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

            send_long_message(chat_id, bot, cleaned_response)
            dialogue_storage.add_message(chat_id, 'assistant', cleaned_response)

            if use_tts and object_id in TTS_ENABLED_USERS:
                time.sleep(1)
                voice_name = TTS_ENABLED_USERS[object_id]
                text_to_speech(cleaned_response, chat_id, voice_name)
        else:
            logging.error("–û—Ç–≤–µ—Ç –æ—Ç Groq –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–ª—É—á–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòä")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_response_with_tts: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è... üòä")

# Stable Code        

def convert_numeric_timezone(numeric_timezone):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ pytz timezone."""
    try:
        offset_hours = int(numeric_timezone)

        # –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º–µ—â–µ–Ω–∏—è
        matching_timezones = [tz for tz in all_timezones_set if 'GMT' not in tz and offset_hours == datetime.now(pytz.timezone(tz)).utcoffset().total_seconds() // 3600]
        
        if matching_timezones:
            return pytz.timezone(matching_timezones[0])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
        else:
            return pytz.UTC  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é UTC

    except ValueError:
        logging.error(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {numeric_timezone}")
        return pytz.UTC

def get_user_and_character_data(object_id):
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ObjectID."""
    try:
        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ObjectID
        user_data = users_collection.find_one({"_id": ObjectId(object_id)})
        if not user_data:
            raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ObjectID {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ characters
        character_name = user_data.get("character", "Default Character")
        character_data = characters_collection.find_one({"character": character_name})
        if not character_data:
            raise ValueError(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å –∏–º–µ–Ω–µ–º {character_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ characters.")

        character_description = character_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        users_gender = user_data.get("users_gender", "unknown")
        timezone_offset = user_data.get("timezone", 0)

        return character_description, users_gender, timezone_offset, user_data.get("chat_id")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
        return None, None, None, None
    

def get_random_elements(elements, n):
    return random.sample(elements, min(n, len(elements)))

def split_message(message, max_length):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length."""
    return [message[i:i + max_length] for i in range(0, len(message), max_length)]

def truncate_repeating_text(text, max_repeats=3):
    """–û–±—Ä–µ–∑–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ –∏ —Å–∏–º–≤–æ–ª—ã."""
    
    # –£–±–∏—Ä–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å—Ä—Å—Ä—Å—Ä—Å—Ä—Å...')
    def limit_repeated_chars(match):
        char_sequence = match.group(0)
        return char_sequence[:max_repeats]
    
    # –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
    text = re.sub(r'(.)\1{3,}', limit_repeated_chars, text)

    words = text.split()
    result = []
    prev_word = None
    repeat_count = 0
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–ª–æ–≤
    for word in words:
        if word == prev_word:
            repeat_count += 1
        else:
            repeat_count = 0
        
        if repeat_count < max_repeats:
            result.append(word)
        
        prev_word = word
    
    return ' '.join(result)

def send_long_message(chat_id, bot, message):
    max_message_length = 4096
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
    for i in range(0, len(message), max_message_length):
        bot.send_message(chat_id, message[i:i+max_message_length])


def send_scheduled_message(object_id):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if object_id == "670543779eed55e5c40145ea":  # –∞–ª
            utc_plus_5 = pytz.FixedOffset(5 * 60)
            current_time = datetime.now(utc_plus_5)
            
            if (
                current_time.hour < 7 
                or (8 <= current_time.hour < 11) 
                or (12 <= current_time.hour < 18) 
                or (19 <= current_time.hour < 21) 
                or (current_time.hour >= 23)
            ):
                logging.info(f"–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ObjectID {object_id}, –≤—Ä–µ–º—è {current_time.strftime('%H:%M')} UTC+5")
                return

        if object_id == "66fe7107ba9a8734f34b71cd":  # –º–Ω
            utc_plus_3 = pytz.FixedOffset(3 * 60)
            current_time = datetime.now(utc_plus_3)
            
            if (current_time.hour < 7 or 
                (8 <= current_time.hour < 9) or 
                (12 <= current_time.hour < 18) or 
                current_time.hour == 19 or 
                current_time.hour >= 23):
                
                logging.info(f"–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ObjectID {object_id}, –≤—Ä–µ–º—è {current_time.strftime('%H:%M')} UTC+3")
                return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        character_info, users_gender, timezone_offset, chat_id = get_user_and_character_data(object_id)

        if character_info is None:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TTS –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞–∫–æ–π –≥–æ–ª–æ—Å.
        use_tts = object_id in TTS_ENABLED_USERS

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        user_timezone = convert_numeric_timezone(timezone_offset).zone
        tz_manager = TimeZoneManager(user_timezone)
        current_hour = tz_manager.get_current_hour()
        base_prompt_file = tz_manager.get_prompt_for_time(current_hour)
        time_based_elements = tz_manager.get_elements_for_time(current_hour)
        
        now = datetime.now(tz_manager.default_timezone)
        today = now.strftime("%d.%m.%Y")
        current_time = now.strftime("%H:%M")

        today_elements = random.sample(time_based_elements, 2)
        final_prompt = f"{base_prompt_file}\n–°–µ–≥–æ–¥–Ω—è {today}, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {current_time}. " \
                      f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏ –≤ –ø–æ–∂–µ–ª–∞–Ω–∏–µ —Ç–µ–º—ã: {', '.join(today_elements)}. " \
                      f"–£—á–∏—Ç—ã–≤–∞–π —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫."

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        dialogue_history = dialogue_storage.get_messages(chat_id)[0:0]

        if len(dialogue_history) == 0:
            bot.send_message(chat_id, "üéâü•∞")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Groq
        messages_for_groq = [
            {"role": msg["role"], "content": msg["content"]} for msg in dialogue_history
        ]

        system_message = {
            "role": "system",
            "content": character_info
        }

        messages = [system_message] + messages_for_groq
        messages.append({"role": 'user', "content": final_prompt})

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Groq
        response = client_groq.chat.completions.create(
            model='llama-3.3-70b-versatile',
            messages=[{"role": 'user', "content": "\n".join([msg["content"] for msg in messages])}],
            temperature=0
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º TTS
        # process_response_with_tts(response, chat_id, bot, users_gender, use_tts)
        process_response_with_tts(response, chat_id, bot, users_gender, use_tts, object_id)

    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_scheduled_message: {e}')
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòä")

if __name__ == '__main__':
    import sys
    if len(sys.argv) != 2:
        logging.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –û–∂–∏–¥–∞–ª—Å—è –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - ObjectID.")
    else:
        object_id = sys.argv[1]
        send_scheduled_message(object_id)
